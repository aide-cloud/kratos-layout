// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos-layout/internal/biz"
	"github.com/go-kratos/kratos-layout/internal/conf"
	"github.com/go-kratos/kratos-layout/internal/data"
	"github.com/go-kratos/kratos-layout/internal/server"
	"github.com/go-kratos/kratos-layout/internal/service"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	confServer := bootstrap.Server
	confData := bootstrap.Data
	log := bootstrap.Log
	logger := GetLogger(log)
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	pingRepo := data.NewPingRepo(dataData, logger)
	pingLogic := biz.NewPingLogic(pingRepo, logger)
	pingService := service.NewPingService(pingLogic, logger)
	trace := bootstrap.Trace
	tracerProvider := GetTrace(trace)
	grpcServer := server.NewGRPCServer(confServer, pingService, tracerProvider, logger)
	graphqlService := service.NewGraphqlService(logger)
	root := service.NewRoot(logger)
	engine := server.GetGinEngine(confServer, pingService, graphqlService, root, tracerProvider, logger)
	httpServer := server.NewHTTPServer(confServer, engine, logger)
	registrar := bootstrap.Registrar
	client := GetETCD(registrar)
	registry := GetETCDRegistrar(client)
	env := bootstrap.Env
	v := GetEnv(env, logger)
	app := newApp(grpcServer, httpServer, registry, v...)
	return app, func() {
		cleanup()
	}, nil
}
